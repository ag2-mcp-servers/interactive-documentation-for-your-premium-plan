# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:06:38+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AirQualityPointHourlyData(BaseModel):
    aerosol_550: Optional[float] = Field(
        None,
        description='Total aerosol optical depth at 550 nm.\nUnit: dimensionless',
        title='Aerosol 550',
    )
    air_quality: Optional[float] = Field(
        None,
        description='Air quality index. The following values can appear:\n\n* 1 - Very good\n* 2 - Good\n* 3 - Medium\n* 4 - Poor\n* 5 - Very poor\n* 6 - Extremely poor\n\nUnit: index',
        title='Air Quality',
    )
    co_surface: Optional[float] = Field(
        None,
        description='Carbon monoxide at surface level.\nUnit: µg/m3',
        title='Co Surface',
    )
    date: Optional[datetime] = Field(
        None,
        description='Datetime in YYYY-MM-DDTHH:MM:SS format.',
        examples=['2022-03-30T18:00:00'],
        title='Date',
    )
    dust_550nm: Optional[float] = Field(
        None,
        description='Dust aerosol optical depth at 550 nm.\nUnit: dimensionless',
        title='Dust 550Nm',
    )
    dust_mixing_ratio_05: Optional[float] = Field(
        None,
        description='Dust aerosol (0.55 - 0.9 µm) mixing ratio.\nUnit: kg/kg',
        title='Dust Mixing Ratio 05',
    )
    no2_surface: Optional[float] = Field(
        None,
        description='Nitrogen dioxide at surface level.\nUnit: µg/m3',
        title='No2 Surface',
    )
    no_surface: Optional[float] = Field(
        None,
        description='Nitrogen monoxide at surface level.\nUnit: µg/m3',
        title='No Surface',
    )
    ozone_surface: Optional[float] = Field(
        None, description='Ozone.\nUnit: µg/m3', title='Ozone Surface'
    )
    ozone_total: Optional[float] = Field(
        None, description='Total column ozone.\nUnit: Dobson', title='Ozone Total'
    )
    pm10: Optional[float] = Field(
        None,
        description='Particulate matter d < 10 µm (PM10).\nUnit: µg/m3',
        title='Pm10',
    )
    pm25: Optional[float] = Field(
        None,
        description='Particulate matter d < 2.5 µm (PM2.5).\nUnit: µg/m3',
        title='Pm25',
    )
    so2_surface: Optional[float] = Field(
        None,
        description='Sulphur dioxide at surface level.\nUnit: µg/m3',
        title='So2 Surface',
    )


class FindPlacesModel(BaseModel):
    adm_area1: Optional[str] = Field(
        'England',
        description='first-level administrative area (a US state, for example)',
        title='Adm Area1',
    )
    adm_area2: Optional[str] = Field(
        'Greater London',
        description='second-level administrative area (a US county, for example)',
        title='Adm Area2',
    )
    country: Optional[str] = Field(
        'United Kingdom', description='name of the country', title='Country'
    )
    lat: Optional[str] = Field(
        '23.2N',
        description='Latitude of the point, always in the format \\<float><N/S>, for example ``23.5S``',
        title='Lat',
    )
    lon: Optional[str] = Field(
        '15.3E',
        description='Longitude of the point, always in format \\<float><E/W>, for example ``23.5W``',
        title='Lon',
    )
    name: Optional[str] = Field('London', description='name of the place', title='Name')
    place_id: Optional[str] = Field(
        'london',
        description='unique identifier of the place, which can be used in /point and /map endpoints',
        title='Place Id',
    )
    timezone: Optional[str] = Field(
        'Europe/London',
        description='Timezone of the point in tzinfo format.',
        title='Timezone',
    )
    type: Optional[str] = Field(
        'settlement',
        description='The character of the place. May be one of the following values:\n\n* administrative areas (states, counties, districts...): ``administrative_area``\n* country: ``country``\n* a different political entity from a country (for example, a dependent teritory): ``political_entity``\n* villages, towns and cities: ``settlement``\n* air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal``\n* places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,\n    ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula``\n* places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon``\n* other places related to nature: ``park``, ``reserve``, ``resort``, ``desert``\n* places based on postcodes: ``postcode``\n        ',
        title='Type',
    )


class GeneralRequestError(BaseModel):
    detail: str = Field(..., title='Detail')


class Language(Enum):
    cs = 'cs'
    en = 'en'
    de = 'de'
    es = 'es'
    fr = 'fr'
    pl = 'pl'
    pt = 'pt'


class PointPointAlerts(BaseModel):
    data: Optional[str] = Field(None, title='Data')


class PointPointCurrentPrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Current amount of precipitation.\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: prec_str',
        title='Type',
    )


class PointPointCurrentWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='Wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Wind gust speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Wind speed 10 metres above the ground.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointDailyAfternoonCloudCoverData(BaseModel):
    high: Optional[float] = Field(
        None,
        description='Percentage of sky covered by high clouds. (afternoon avg)\nUnit: \\%',
        title='High',
    )
    low: Optional[float] = Field(
        None,
        description='Percentage of sky covered by low clouds. (afternoon avg)\nUnit: \\%',
        title='Low',
    )
    middle: Optional[float] = Field(
        None,
        description='Percentage of sky covered by middle clouds. (afternoon avg)\nUnit: \\%',
        title='Middle',
    )
    total: Optional[float] = Field(
        None,
        description='Percentage of sky covered by clouds. (afternoon avg)\nUnit: \\%',
        title='Total',
    )


class PointPointDailyAfternoonPrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour. (afternoon sum)\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class PointPointDailyAfternoonProbData(BaseModel):
    freeze: Optional[float] = Field(
        None,
        description='Probability the temperature drops below 0 °C. (afternoon avg)\nUnit: %',
        title='Freeze',
    )
    precipitation: Optional[int] = Field(
        None,
        description='Probability of non-zero precipitation.\nUnit: \\%',
        title='Precipitation',
    )
    storm: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnit: mm/h',
        title='Storm',
    )


class PointPointDailyAfternoonWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='Afternoon wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Afternoon wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Wind gust speed. (afternoon max)\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointDailyAllDayCloudCoverData(BaseModel):
    high: Optional[float] = Field(
        None,
        description='Percentage of sky covered by high clouds. (allday avg)\nUnit: \\%',
        title='High',
    )
    low: Optional[float] = Field(
        None,
        description='Percentage of sky covered by low clouds. (allday avg)\nUnit: \\%',
        title='Low',
    )
    middle: Optional[float] = Field(
        None,
        description='Percentage of sky covered by middle clouds. (allday avg)\nUnit: \\%',
        title='Middle',
    )
    total: Optional[float] = Field(
        None,
        description='Percentage of sky covered by clouds. (allday avg)\nUnit: \\%',
        title='Total',
    )


class PointPointDailyAllDayPrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour. (allday sum)\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class PointPointDailyAllDayProbData(BaseModel):
    freeze: Optional[float] = Field(
        None,
        description='Probability the temperature drops below 0 °C. (allday avg)\nUnit: %',
        title='Freeze',
    )
    precipitation: Optional[int] = Field(
        None,
        description='Probability of non-zero precipitation.\nUnit: \\%',
        title='Precipitation',
    )
    storm: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnit: mm/h',
        title='Storm',
    )


class PointPointDailyAllDayWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='All day wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='All day wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Wind gust speed. (allday max)\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointDailyEveningCloudCoverData(BaseModel):
    high: Optional[float] = Field(
        None,
        description='Percentage of sky covered by high clouds. (evening avg)\nUnit: \\%',
        title='High',
    )
    low: Optional[float] = Field(
        None,
        description='Percentage of sky covered by low clouds. (evening avg)\nUnit: \\%',
        title='Low',
    )
    middle: Optional[float] = Field(
        None,
        description='Percentage of sky covered by middle clouds. (evening avg)\nUnit: \\%',
        title='Middle',
    )
    total: Optional[float] = Field(
        None,
        description='Percentage of sky covered by clouds. (evening avg)\nUnit: \\%',
        title='Total',
    )


class PointPointDailyEveningPrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour. (evening sum)\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class PointPointDailyEveningProbData(BaseModel):
    freeze: Optional[float] = Field(
        None,
        description='Probability the temperature drops below 0 °C. (evening avg)\nUnit: %',
        title='Freeze',
    )
    precipitation: Optional[int] = Field(
        None,
        description='Probability of non-zero precipitation.\nUnit: \\%',
        title='Precipitation',
    )
    storm: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnit: mm/h',
        title='Storm',
    )


class PointPointDailyEveningWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='Evening wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Evening wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Wind gust speed. (evening max)\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointDailyMoonData(BaseModel):
    always_down: Optional[bool] = Field(
        None,
        description='True if the moon never rises on given day, false otherwise.',
        title='Always Down',
    )
    always_up: Optional[bool] = Field(
        None,
        description='True if the moon never sets on given day, false otherwise.',
        title='Always Up',
    )
    phase: Optional[bytes] = Field(
        None,
        description="Name of the moon phase, one of 'new_moon', 'first_quarter', 'full_moon', 'last_quarter'.",
        title='Phase',
    )
    rise: Optional[datetime] = Field(
        None,
        description='Datetime of the moonrise or null if the moon does not rise on given day.',
        examples=['2022-03-30T18:00:00'],
        title='Rise',
    )
    set: Optional[datetime] = Field(
        None,
        description='Datetime of the moonset or null if the moon does not set on given day.',
        examples=['2022-03-30T18:00:00'],
        title='Set',
    )


class PointPointDailyMorningCloudCoverData(BaseModel):
    high: Optional[float] = Field(
        None,
        description='Percentage of sky covered by high clouds. (morning avg)\nUnit: \\%',
        title='High',
    )
    low: Optional[float] = Field(
        None,
        description='Percentage of sky covered by low clouds. (morning avg)\nUnit: \\%',
        title='Low',
    )
    middle: Optional[float] = Field(
        None,
        description='Percentage of sky covered by middle clouds. (morning avg)\nUnit: \\%',
        title='Middle',
    )
    total: Optional[float] = Field(
        None,
        description='Percentage of sky covered by clouds. (morning avg)\nUnit: \\%',
        title='Total',
    )


class PointPointDailyMorningPrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour. (morning sum)\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class PointPointDailyMorningProbData(BaseModel):
    freeze: Optional[float] = Field(
        None,
        description='Probability the temperature drops below 0 °C. (morning avg)\nUnit: %',
        title='Freeze',
    )
    precipitation: Optional[int] = Field(
        None,
        description='Probability of non-zero precipitation.\nUnit: \\%',
        title='Precipitation',
    )
    storm: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnit: mm/h',
        title='Storm',
    )


class PointPointDailyMorningWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='Morning wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Morning wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Wind gust speed. (morning max)\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointDailyStatsPrecipitationData(BaseModel):
    avg: Optional[float] = Field(
        None,
        description='Long-term average daily precipitation amount.\nUnits: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day',
        title='Avg',
    )
    probability: Optional[int] = Field(
        None,
        description='Long-term average precipitation probability.\nUnit: \\%',
        title='Probability',
    )


class PointPointDailyStatsTemperatureData(BaseModel):
    avg: Optional[float] = Field(
        None,
        description='Long-term temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg',
    )
    avg_max: Optional[float] = Field(
        None,
        description='Long-term daily maximum temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg Max',
    )
    avg_min: Optional[float] = Field(
        None,
        description='Long-term daily minimum temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg Min',
    )
    record_max: Optional[float] = Field(
        None,
        description='Historical daily maximum.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Record Max',
    )
    record_min: Optional[float] = Field(
        None,
        description='Historical daily minimum temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Record Min',
    )


class PointPointDailyStatsWindData(BaseModel):
    avg_angle: Optional[float] = Field(
        None, description='Long-term average wind angle.\nUnit: deg', title='Avg Angle'
    )
    avg_dir: Optional[bytes] = Field(
        None,
        description="Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format.\nUnit: 16dir",
        title='Avg Dir',
    )
    avg_speed: Optional[float] = Field(
        None,
        description='Long-term average wind speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Avg Speed',
    )
    max_gust: Optional[float] = Field(
        None,
        description='Historical daily maximum wind gust speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Max Gust',
    )
    max_speed: Optional[float] = Field(
        None,
        description='Historical daily maximum wind speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Max Speed',
    )


class PointPointDailySunData(BaseModel):
    always_down: Optional[bool] = Field(
        None,
        description='True if the sun never rises on given day (polar night), false otherwise.',
        title='Always Down',
    )
    always_up: Optional[bool] = Field(
        None,
        description='True if the sun never sets on given day (polar day), false otherwise.',
        title='Always Up',
    )
    rise: Optional[datetime] = Field(
        None,
        description='Datetime of the sunrise or null during polar day/night.',
        examples=['2022-03-30T18:00:00'],
        title='Rise',
    )
    set: Optional[datetime] = Field(
        None,
        description='Datetime of the sunset or null during polar day/night.',
        examples=['2022-03-30T18:00:00'],
        title='Set',
    )


class PointPointHourlyCloudCoverData(BaseModel):
    high: Optional[float] = Field(
        None,
        description='Percentage of sky covered by high clouds.\nUnit: \\%',
        title='High',
    )
    low: Optional[float] = Field(
        None,
        description='Percentage of sky covered by low clouds.\nUnit: \\%',
        title='Low',
    )
    middle: Optional[float] = Field(
        None,
        description='Percentage of sky covered by middle clouds.\nUnit: \\%',
        title='Middle',
    )
    total: Optional[float] = Field(None, description='Unit: \\%', title='Total')


class PointPointHourlyPrecipitationData(BaseModel):
    convective: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Convective',
    )
    rainspot: Optional[bytes] = Field(
        None,
        description='Precipitation in the surrounding of queried location. The data is 7x7 ASCII art string, queried location being in the center. Character `#` means there is precipitation, `.` means no precipitation. The distance between neighboring cells is 0.25°.\nUnit: rainspot',
        title='Rainspot',
    )
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class PointPointHourlyProbData(BaseModel):
    freeze: Optional[float] = Field(None, description='Unit: \\%', title='Freeze')
    precipitation: Optional[int] = Field(
        None,
        description='Probability of non-zero precipitation.\nUnit: \\%',
        title='Precipitation',
    )
    storm: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnit: mm/h',
        title='Storm',
    )


class PointPointHourlyWindData(BaseModel):
    angle: Optional[float] = Field(
        None,
        description='Wind direction angle in degrees, 180° means wind from the south.\nUnit: degrees',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[float] = Field(
        None,
        description='Units: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class PointPointMinutelyPrecipitationData(BaseModel):
    date: Optional[datetime] = Field(
        None,
        description='Datetime in YYYY-MM-DDTHH:MM:SS format.',
        examples=['2022-03-30T18:00:00'],
        title='Date',
    )
    precipitation: Optional[float] = Field(
        None,
        description='Minutely precipitation amount (per hour). For the startup tier, showing one value per 10 minutes.\nFor other tiers, showing one value per each minute.\n\nUnit: mm/h',
        title='Precipitation',
    )


class TimeMachinePointDailyStatsPrecipitationData(BaseModel):
    avg: Optional[float] = Field(
        None,
        description='Long-term average daily precipitation amount.\nUnits: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day',
        title='Avg',
    )
    probability: Optional[int] = Field(
        None,
        description='Long-term average precipitation probability.\nUnit: \\%',
        title='Probability',
    )


class TimeMachinePointDailyStatsTemperatureData(BaseModel):
    avg: Optional[float] = Field(
        None,
        description='Long-term temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg',
    )
    avg_max: Optional[float] = Field(
        None,
        description='Long-term daily maximum temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg Max',
    )
    avg_min: Optional[float] = Field(
        None,
        description='Long-term daily minimum temperature average.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Avg Min',
    )
    record_max: Optional[float] = Field(
        None,
        description='Historical daily maximum.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Record Max',
    )
    record_min: Optional[float] = Field(
        None,
        description='Historical daily minimum temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Record Min',
    )


class TimeMachinePointDailyStatsWindData(BaseModel):
    avg_angle: Optional[float] = Field(
        None, description='Long-term average wind angle.\nUnit: deg', title='Avg Angle'
    )
    avg_dir: Optional[bytes] = Field(
        None,
        description="Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format.\nUnit: 16dir",
        title='Avg Dir',
    )
    avg_speed: Optional[float] = Field(
        None,
        description='Long-term average wind speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Avg Speed',
    )
    max_gust: Optional[float] = Field(
        None,
        description='Historical daily maximum wind gust speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Max Gust',
    )
    max_speed: Optional[float] = Field(
        None,
        description='Historical daily maximum wind speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Max Speed',
    )


class TimeMachineTimeMachineCloudCoverData(BaseModel):
    high: Optional[int] = Field(
        None,
        description='Percentage of sky covered by high clouds.\nUnit: %',
        title='High',
    )
    low: Optional[int] = Field(
        None,
        description='Percentage of sky covered by low clouds.\nUnit: %',
        title='Low',
    )
    middle: Optional[int] = Field(
        None,
        description='Percentage of sky covered by middle clouds.\nUnit: %',
        title='Middle',
    )
    total: Optional[int] = Field(
        None, description='Percentage of sky covered by clouds.\nUnit: %', title='Total'
    )


class TimeMachineTimeMachinePrecipitationData(BaseModel):
    total: Optional[float] = Field(
        None,
        description='Total precipitation amount accumulated since last hour.\nUnits: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h',
        title='Total',
    )
    type: Optional[bytes] = Field(
        None,
        description='Precipitation type, may be one of:\n\n* `none`, it there is no precipitation\n* `rain`\n* `snow`\n* `rain_snow`\n* `ice pellets`\n* `frozen rain`\n\nUnit: precipitation type',
        title='Type',
    )


class TimeMachineTimeMachineWindData(BaseModel):
    angle: Optional[int] = Field(
        None,
        description='Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: deg',
        title='Angle',
    )
    dir: Optional[bytes] = Field(
        None,
        description='Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.\nUnit: 16dir',
        title='Dir',
    )
    gusts: Optional[int] = Field(
        None,
        description='Wind gust speed.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Gusts',
    )
    speed: Optional[int] = Field(
        None,
        description='Wind speed 10 metres above the ground.\nUnits: metric = m/s, us = mph, uk = mph, ca = km/h',
        title='Speed',
    )


class Units(Enum):
    auto = 'auto'
    metric = 'metric'
    us = 'us'
    uk = 'uk'
    ca = 'ca'


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class FindPlacesGetResponse(RootModel[List[FindPlacesModel]]):
    root: List[FindPlacesModel] = Field(
        ..., title='Response Find Places Find Places Get'
    )


class FindPlacesPrefixGetResponse(RootModel[List[FindPlacesModel]]):
    root: List[FindPlacesModel] = Field(
        ..., title='Response Find Places Prefix Find Places Prefix Get'
    )


class AirQualityPointData(BaseModel):
    data: List[AirQualityPointHourlyData] = Field(..., title='Data')
    elevation: int = Field(
        ...,
        description="Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')",
        title='Elevation',
    )
    lat: str = Field(
        ...,
        description='Latitude of the point, always in the format <float><N/S>, for example ``23.5S``',
        title='Lat',
    )
    lon: str = Field(
        ...,
        description='Longitude of the point, always in the format <float><E/W>, for example ``23.5W``',
        title='Lon',
    )
    timezone: Optional[str] = Field(
        None,
        description="Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.",
        title='Timezone',
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class PointPointCurrentData(BaseModel):
    cloud_cover: Optional[float] = Field(
        None,
        description='Percentage of sky covered by clouds.\nUnit: \\%',
        title='Cloud Cover',
    )
    dew_point: Optional[float] = Field(
        None,
        description='Current dew point temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Feels like temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None, description='Relative humidity.\nUnit: \\%', title='Humidity'
    )
    icon: Optional[str] = Field(
        None,
        description='String identifier of current weather icon, e.g. `light_rain`.',
        title='Icon',
    )
    icon_num: Optional[int] = Field(
        None,
        description='Numeric identifier of current weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: weather_ico0_36',
        title='Icon Num',
    )
    irradiance: Optional[float] = Field(
        None,
        description='Global downward short-wave radiation flux.\nUnit: W/m2',
        title='Irradiance',
    )
    ozone: Optional[float] = Field(
        None, description='Total column of ozone.\nUnit: Dobson', title='Ozone'
    )
    precipitation: PointPointCurrentPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level.\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    summary: Optional[str] = Field(
        None,
        description='Short text summary of current weather, e.g. `Light rain`.',
        title='Summary',
    )
    temperature: Optional[float] = Field(
        None,
        description='Current temperature 2 metres above ground.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    uv_index: Optional[float] = Field(
        None,
        description='UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).\nUnit: uv_index',
        title='Uv Index',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility.\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    wind: PointPointCurrentWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Windchill temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointDailyAfternoonData(BaseModel):
    cloud_cover: PointPointDailyAfternoonCloudCoverData
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None,
        description='Relative humidity. (afternoon avg)\nUnit: \\%',
        title='Humidity',
    )
    icon: Optional[int] = Field(
        None,
        description='Afternoon umeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: icon',
        title='Icon',
    )
    ozone: Optional[float] = Field(
        None,
        description='Total column of ozone. (afternoon avg)\nUnit: Dobson',
        title='Ozone',
    )
    precipitation: PointPointDailyAfternoonPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level. (afternoon avg)\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    probability: PointPointDailyAfternoonProbData
    snow_depth: Optional[float] = Field(
        None,
        description='Snow depth. (afternoon avg)\nUnits: metric = cm, us = inch, uk = cm, ca = cm',
        title='Snow Depth',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    temperature: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (afternoon avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility. (afternoon avg)\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    weather: Optional[str] = Field(
        None,
        description='Afternoon day string identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: PointPointDailyAfternoonWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (afternoon avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointDailyAllDayData(BaseModel):
    cloud_cover: PointPointDailyAllDayCloudCoverData
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    dew_point_max: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point Max',
    )
    dew_point_min: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point Min',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    feels_like_max: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like Max',
    )
    feels_like_min: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like Min',
    )
    humidity: Optional[int] = Field(
        None, description='Relative humidity. (allday avg)\nUnit: \\%', title='Humidity'
    )
    icon: Optional[int] = Field(
        None,
        description='Numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: icon',
        title='Icon',
    )
    ozone: Optional[float] = Field(
        None,
        description='Total column of ozone. (allday avg)\nUnit: Dobson',
        title='Ozone',
    )
    precipitation: PointPointDailyAllDayPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level. (allday avg)\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    probability: PointPointDailyAllDayProbData
    snow_depth: Optional[float] = Field(
        None,
        description='Snow depth. (allday avg)\nUnits: metric = cm, us = inch, uk = cm, ca = cm',
        title='Snow Depth',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    soil_temperature_max: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature Max',
    )
    soil_temperature_min: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature Min',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    surface_temperature_max: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature Max',
    )
    surface_temperature_min: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature Min',
    )
    temperature: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    temperature_max: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday max)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature Max',
    )
    temperature_min: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday min)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature Min',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility. (allday avg)\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    weather: Optional[str] = Field(
        None,
        description='All day string identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: PointPointDailyAllDayWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )
    wind_chill_max: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday max)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill Max',
    )
    wind_chill_min: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (allday min)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill Min',
    )


class PointPointDailyAstroData(BaseModel):
    moon: PointPointDailyMoonData
    sun: PointPointDailySunData


class PointPointDailyEveningData(BaseModel):
    cloud_cover: PointPointDailyEveningCloudCoverData
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None,
        description='Relative humidity. (evening avg)\nUnit: \\%',
        title='Humidity',
    )
    icon: Optional[int] = Field(
        None,
        description='Evening numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: icon',
        title='Icon',
    )
    ozone: Optional[float] = Field(
        None,
        description='Total column of ozone. (evening avg)\nUnit: Dobson',
        title='Ozone',
    )
    precipitation: PointPointDailyEveningPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level. (evening avg)\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    probability: PointPointDailyEveningProbData
    snow_depth: Optional[float] = Field(
        None,
        description='Snow depth. (evening avg)\nUnits: metric = cm, us = inch, uk = cm, ca = cm',
        title='Snow Depth',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    temperature: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (evening avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility. (evening avg)\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    weather: Optional[str] = Field(
        None,
        description='Evening day string identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: PointPointDailyEveningWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (evening avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointDailyMorningData(BaseModel):
    cloud_cover: PointPointDailyMorningCloudCoverData
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None,
        description='Relative humidity. (morning avg)\nUnit: \\%',
        title='Humidity',
    )
    icon: Optional[int] = Field(
        None,
        description='Morning numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: icon',
        title='Icon',
    )
    ozone: Optional[float] = Field(
        None,
        description='Total column of ozone. (morning avg)\nUnit: Dobson',
        title='Ozone',
    )
    precipitation: PointPointDailyMorningPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level. (morning avg)\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    probability: PointPointDailyMorningProbData
    snow_depth: Optional[float] = Field(
        None,
        description='Snow depth. (morning avg)\nUnits: metric = cm, us = inch, uk = cm, ca = cm',
        title='Snow Depth',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    temperature: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (morning avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility. (morning avg)\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    weather: Optional[str] = Field(
        None,
        description='Morning day string identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: PointPointDailyMorningWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Temperature 2 metres above ground. (morning avg)\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointDailyStatsData(BaseModel):
    precipitation: PointPointDailyStatsPrecipitationData
    temperature: PointPointDailyStatsTemperatureData
    wind: PointPointDailyStatsWindData


class PointPointHourlyData(BaseModel):
    cape: Optional[float] = Field(
        None,
        description='Convective available potential energy.\nUnit: J/kg',
        title='Cape',
    )
    cloud_cover: PointPointHourlyCloudCoverData
    date: Optional[datetime] = Field(
        None,
        description='Datetime in YYYY-MM-DDTHH:MM:SS format.',
        examples=['2022-03-30T18:00:00'],
        title='Date',
    )
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    evaporation: Optional[float] = Field(
        None,
        description='Evaporation of liquid water into water vapor.\nUnit: mm/h',
        title='Evaporation',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None, description='Relative humidity.\nUnit: \\%', title='Humidity'
    )
    icon: Optional[int] = Field(
        None,
        description='Numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: weather_ico0_36',
        title='Icon',
    )
    irradiance: Optional[float] = Field(
        None,
        description='Global downward short-wave radiation flux.\nUnit: W/m2',
        title='Irradiance',
    )
    lftx: Optional[float] = Field(
        None, description='Surface lifted index.\nUnit: K', title='Lftx'
    )
    ozone: Optional[float] = Field(
        None, description='Total column of ozone.\nUnit: Dobson', title='Ozone'
    )
    precipitation: PointPointHourlyPrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level.\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    probability: PointPointHourlyProbData
    snow_depth: Optional[float] = Field(
        None,
        description='Snow depth.\nUnits: metric = cm, us = inch, uk = cm, ca = cm',
        title='Snow Depth',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    summary: Optional[str] = Field(
        None,
        description='Short text summary of the weather, e.g. `Light rain`.',
        title='Summary',
    )
    sunshine_duration: Optional[float] = Field(
        None,
        description='Sunshine duration since start of previous hour.\nUnit: s',
        title='Sunshine Duration',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    uv_index: Optional[float] = Field(
        None,
        description='UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).\nUnit: uv_index',
        title='Uv Index',
    )
    visibility: Optional[float] = Field(
        None,
        description='Visibility.\nUnits: metric = km, us = mi, uk = mi, ca = km',
        title='Visibility',
    )
    weather: Optional[str] = Field(
        None,
        description='String identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: PointPointHourlyWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointMinutely(BaseModel):
    data: List[PointPointMinutelyPrecipitationData] = Field(..., title='Data')
    summary: Optional[str] = Field(
        None,
        description='Text summary about upcoming precipitation.\nUnit: summary',
        title='Summary',
    )


class TimeMachinePointDailyStatsData(BaseModel):
    precipitation: TimeMachinePointDailyStatsPrecipitationData
    temperature: TimeMachinePointDailyStatsTemperatureData
    wind: TimeMachinePointDailyStatsWindData


class TimeMachineTimeMachineHourlyData(BaseModel):
    cape: Optional[int] = Field(
        None,
        description='Convective available potential energy.\nUnit: J/kg',
        title='Cape',
    )
    cloud_cover: TimeMachineTimeMachineCloudCoverData
    date: Optional[datetime] = Field(
        None,
        description='Datetime in YYYY-MM-DDTHH:MM:SS format.',
        examples=['2022-03-30T18:00:00'],
        title='Date',
    )
    dew_point: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Dew Point',
    )
    evaporation: Optional[int] = Field(
        None,
        description='Evaporation of liquid water into water vapor.\nUnit: mm/h',
        title='Evaporation',
    )
    feels_like: Optional[float] = Field(
        None,
        description='Feels like temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Feels Like',
    )
    humidity: Optional[int] = Field(
        None, description='Relative humidity.\nUnit: \\%', title='Humidity'
    )
    icon: Optional[int] = Field(
        None,
        description='Numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: N/A',
        title='Icon',
    )
    irradiance: Optional[int] = Field(
        None,
        description='Global downward short-wave radiation flux.\nUnit: W/m2',
        title='Irradiance',
    )
    ozone: Optional[int] = Field(
        None, description='Total column of ozone.\nUnit: Dobson', title='Ozone'
    )
    precipitation: TimeMachineTimeMachinePrecipitationData
    pressure: Optional[float] = Field(
        None,
        description='Atmospheric pressure at mean sea level.\nUnits: metric = hPa, us = Hg, uk = hPa, ca = kPa',
        title='Pressure',
    )
    soil_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Soil Temperature',
    )
    surface_temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Surface Temperature',
    )
    temperature: Optional[float] = Field(
        None,
        description='Units: metric = °C, us = °F, uk = °C, ca = °C',
        title='Temperature',
    )
    weather: Optional[str] = Field(
        None,
        description='String identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )
    wind: TimeMachineTimeMachineWindData
    wind_chill: Optional[float] = Field(
        None,
        description='Windchill temperature.\nUnits: metric = °C, us = °F, uk = °C, ca = °C',
        title='Wind Chill',
    )


class PointPointDailyData(BaseModel):
    afternoon: Optional[PointPointDailyAfternoonData] = None
    all_day: PointPointDailyAllDayData
    astro: PointPointDailyAstroData
    day: Optional[bytes] = Field(
        None, description='Datetime in YYYY-MM-DDTHH:MM:SS format.', title='Day'
    )
    evening: Optional[PointPointDailyEveningData] = None
    icon: Optional[int] = Field(
        None,
        description='Numeric identifier of the weather icon. The following values can appear:\n\n* 1 - Not available\n* 2 - Sunny\n* 3 - Mostly sunny\n* 4 - Partly sunny\n* 5 - Mostly cloudy\n* 6 - Cloudy\n* 7 - Overcast\n* 8 - Overcast with low clouds\n* 9 - Fog\n* 10 - Light rain\n* 11 - Rain\n* 12 - Possible rain\n* 13 - Rain shower\n* 14 - Thunderstorm\n* 15 - Local thunderstorms\n* 16 - Light snow\n* 17 - Snow\n* 18 - Possible snow\n* 19 - Snow shower\n* 20 - Rain and snow\n* 21 - Possible rain and snow\n* 22 - Rain and snow\n* 23 - Freezing rain\n* 24 - Possible freezing rain\n* 25 - Hail\n* 26 - Clear (night)\n* 27 - Mostly clear (night)\n* 28 - Partly clear (night)\n* 29 - Mostly cloudy (night)\n* 30 - Cloudy (night)\n* 31 - Overcast with low clouds (night)\n* 32 - Rain shower (night)\n* 33 - Local thunderstorms (night)\n* 34 - Snow shower (night)\n* 35 - Rain and snow (night)\n* 36 - Possible freezing rain (night)\n\nUnit: icon',
        title='Icon',
    )
    morning: Optional[PointPointDailyMorningData] = None
    predictability: Optional[int] = Field(
        None,
        description='Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability).\nUnit: 1-5',
        title='Predictability',
    )
    statistics: PointPointDailyStatsData
    summary: Optional[str] = Field(
        None,
        description='Short text summary of the weather, e.g. `Light rain`.',
        title='Summary',
    )
    weather: Optional[str] = Field(
        None,
        description='All day string identifier of the weather icon, e.g. `light_rain`.',
        title='Weather',
    )


class PointPointHourly(BaseModel):
    data: List[PointPointHourlyData] = Field(..., title='Data')


class TimeMachineTimeMachine(BaseModel):
    data: List[TimeMachineTimeMachineHourlyData] = Field(..., title='Data')
    elevation: int = Field(
        ...,
        description="Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')",
        title='Elevation',
    )
    lat: str = Field(
        ...,
        description='Latitude of the point, always in the format <float><N/S>, for example ``23.5S``',
        title='Lat',
    )
    lon: str = Field(
        ...,
        description='Longitude of the point, always in the format <float><E/W>, for example ``23.5W``',
        title='Lon',
    )
    statistics: TimeMachinePointDailyStatsData
    timezone: Optional[str] = Field(
        None,
        description="Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.",
        title='Timezone',
    )
    units: str = Field(
        ..., description='Unit system (metric, uk, ca or us)', title='Units'
    )


class PointPointDaily(BaseModel):
    data: List[PointPointDailyData] = Field(..., title='Data')


class PointPointData(BaseModel):
    alerts: PointPointAlerts
    current: Optional[PointPointCurrentData] = None
    daily: Optional[PointPointDaily] = None
    elevation: int = Field(
        ...,
        description="Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')",
        title='Elevation',
    )
    hourly: Optional[PointPointHourly] = None
    lat: str = Field(
        ...,
        description='Latitude of the point, always in the format <float><N/S>, for example ``23.5S``',
        title='Lat',
    )
    lon: str = Field(
        ...,
        description='Longitude of the point, always in the format <float><E/W>, for example ``23.5W``',
        title='Lon',
    )
    minutely: Optional[PointPointMinutely] = None
    timezone: Optional[str] = Field(
        None,
        description="Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.",
        title='Timezone',
    )
    units: str = Field(
        ..., description='Unit system (metric, uk, ca or us)', title='Units'
    )
