# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:06:38+00:00



import argparse
import json
import os
from datetime import date
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AirQualityPointData,
    FindPlacesGetResponse,
    FindPlacesModel,
    FindPlacesPrefixGetResponse,
    GeneralRequestError,
    HTTPValidationError,
    Language,
    PointPointData,
    TimeMachineTimeMachine,
    Units,
)

app = MCPProxy(
    description='\n\nThis interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).\n\nUsing the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need.\n',
    title='Interactive documentation for your Premium plan',
    version='v1',
    servers=[{'url': '/api/v1/premium'}],
)


@app.get(
    '/air_quality',
    description=""" ## Air quality forecast for a single location

### Location specification
The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this:
1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).

### Notes
* **For a detailed description of variables, please consult ⚠️ <a href="https://www.meteosource.com/documentation#description_aq" target="_blank">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).**
* Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them.
* The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**.
* Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request.
* When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).
 """,
    tags=['air_quality_data_retrieval', 'location_search_enhancement'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def air_quality_air_quality_get(
    place_id: Optional[str] = None,
    lat: Optional[str] = None,
    lon: Optional[str] = None,
    timezone: Optional[str] = None,
    key: Optional[str] = None,
):
    """
    Returns air quality data for a single point (geographic name or GPS)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/find_places',
    description=""" ## Search for places

You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint.
The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.

Unlike the `/find_place_prefix` endpoint, complete words are required here. You can search for cities,
mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance.
You can then identify the one you want by coordinates, country, or the administrative area.
 """,
    tags=['location_search_enhancement'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def find_places_find_places_get(
    text: str, language: Optional[Language] = 'en', key: Optional[str] = None
):
    """
    Search for places. Complete words required.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/find_places_prefix',
    description=""" ## Search for places by prefix

You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.

Unlike the `/find_places` endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
 """,
    tags=['location_search_enhancement'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def find_places_prefix_find_places_prefix_get(
    text: str, language: Optional[Language] = 'en', key: Optional[str] = None
):
    """
    Prefix search for places. Useful for autocomplete forms.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/map',
    description=""" ## PNG weather forecast maps for given area and variable

### Area specification
There are two ways to specify geographical area you need for your map:
1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" rel="nofollow" target="_blank">Google Maps Tile notation</a>.
2. Specify latitude and longitude bounds of the area you want to cover.

### Notes
* The resulting PNG maps are **always** in <a href="https://epsg.io/3857" rel="nofollow" target="_blank">Google Mercator projection (EPSG:3857)</a>.
* As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent.
* The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses.
* Weather maps are only supported for forecasts, not for archive data.
 """,
    tags=['geographic_weather_data', 'weather_map_visualization'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def map_map_get(
    tile_x: Optional[int] = None,
    tile_y: Optional[int] = None,
    tile_zoom: Optional[int] = None,
    min_lat: Optional[str] = None,
    min_lon: Optional[str] = None,
    max_lat: Optional[str] = None,
    max_lon: Optional[str] = None,
    variable: str = ...,
    datetime: str = ...,
    key: Optional[str] = None,
):
    """
    Returns PNG weather map for given area and variable
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nearest_place',
    description=""" ## Search for nearest place by coordinates

You can use this endpoint to find the nearest place from given coordinates.

*Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
 """,
    tags=['location_search_enhancement'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def nearest_place_nearest_place_get(
    lat: str,
    lon: str = ...,
    language: Optional[Language] = 'en',
    key: Optional[str] = None,
):
    """
    Returns the nearest named location for a given GPS coordinates.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/point',
    description=""" ## Current weather and forecast for single location

### Location specification
The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this:
1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).

*Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*

### Sections
The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:

* Current weather situation
* Hourly forecast (for 24/48/96/168 hours, depending on the tier)
* Daily forecast (for 7/10/30 days, depending on the tier)
* Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers)
* Weather alerts (only for higher tiers)

By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.

### Notes
* **For a detailed description of variables (e.g. icons), please consult ⚠️ <a href="https://www.meteosource.com/documentation#description" target="_blank">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).**
* Variables can be instantaneous, averaged, or accumulated over certain time. For example, `precipitation` forecast provides the precipitation accumulated until the next hour (data with timestamp as `12:00:00` is rain accumulated from `12:00:00` to `13:00:00`).
* Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them.
* The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**.
* Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request.
* When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).
* The detailed description of weather alerts is only available in English. The alert category is translated into selected language.
 """,
    tags=['geographic_weather_data'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def point_point_get(
    place_id: Optional[str] = None,
    lat: Optional[str] = None,
    lon: Optional[str] = None,
    sections: Optional[str] = 'current,hourly',
    timezone: Optional[str] = None,
    language: Optional[Language] = 'en',
    units: Optional[Units] = 'auto',
    key: Optional[str] = None,
):
    """
    Returns weather data for a single point (geographic name or GPS)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/time_machine',
    description=""" ## Actual weather data for a single location and day in the past

The output contains actual weather data for each day up to 8 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.

### Location specification
The location of the weather data must be specified. There are two ways to do this:
1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).

*Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
 """,
    tags=['geographic_weather_data'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def time_machine_time_machine_get(
    place_id: Optional[str] = None,
    lat: Optional[str] = None,
    lon: Optional[str] = None,
    date: date = ...,
    timezone: Optional[str] = None,
    units: Optional[Units] = 'auto',
    key: Optional[str] = None,
):
    """
    Returns weather data for a single location and given day in the past
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
